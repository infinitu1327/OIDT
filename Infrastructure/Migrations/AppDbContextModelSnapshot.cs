// <auto-generated />

using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    internal class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("Models.Events.CurrencyPurchaseEvent", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                b.Property<DateTime>("Date")
                    .HasColumnName("date");

                b.Property<int>("ParametersId")
                    .HasColumnName("parameters_id");

                b.Property<string>("Udid")
                    .HasColumnName("udid");

                b.HasKey("Id")
                    .HasName("pk_currency_purchase");

                b.HasIndex("ParametersId")
                    .IsUnique();

                b.ToTable("currency_purchase", "events");
            });

            modelBuilder.Entity("Models.Events.FirstLaunchEvent", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                b.Property<DateTime>("Date")
                    .HasColumnName("date");

                b.Property<int>("ParametersId")
                    .HasColumnName("parameters_id");

                b.Property<string>("Udid")
                    .HasColumnName("udid");

                b.HasKey("Id")
                    .HasName("pk_first_launch");

                b.HasIndex("ParametersId")
                    .IsUnique();

                b.ToTable("first_launch", "events");
            });

            modelBuilder.Entity("Models.Events.GameLaunchEvent", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                b.Property<DateTime>("Date")
                    .HasColumnName("date");

                b.Property<string>("Udid")
                    .HasColumnName("udid");

                b.HasKey("Id")
                    .HasName("pk_game_launch");

                b.ToTable("game_launch", "events");
            });

            modelBuilder.Entity("Models.Events.InGamePurchaseEvent", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                b.Property<DateTime>("Date")
                    .HasColumnName("date");

                b.Property<int>("ParametersId")
                    .HasColumnName("parameters_id");

                b.Property<string>("Udid")
                    .HasColumnName("udid");

                b.HasKey("Id")
                    .HasName("pk_in_game_purchase");

                b.HasIndex("ParametersId")
                    .IsUnique();

                b.ToTable("in_game_purchase", "events");
            });

            modelBuilder.Entity("Models.Events.StageEndEvent", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                b.Property<DateTime>("Date")
                    .HasColumnName("date");

                b.Property<int>("ParametersId")
                    .HasColumnName("parameters_id");

                b.Property<string>("Udid")
                    .HasColumnName("udid");

                b.HasKey("Id")
                    .HasName("pk_stage_end");

                b.HasIndex("ParametersId")
                    .IsUnique();

                b.ToTable("stage_end", "events");
            });

            modelBuilder.Entity("Models.Events.StageStartEvent", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                b.Property<DateTime>("Date")
                    .HasColumnName("date");

                b.Property<int>("ParametersId")
                    .HasColumnName("parameters_id");

                b.Property<string>("Udid")
                    .HasColumnName("udid");

                b.HasKey("Id")
                    .HasName("pk_stage_start");

                b.HasIndex("ParametersId")
                    .IsUnique();

                b.ToTable("stage_start", "events");
            });

            modelBuilder.Entity("Models.Parameters.CurrencyPurchaseParameters", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                b.Property<int>("Income")
                    .HasColumnName("income");

                b.Property<string>("Name")
                    .HasColumnName("name");

                b.Property<decimal>("Price")
                    .HasColumnName("price");

                b.HasKey("Id")
                    .HasName("pk_currency_purchase");

                b.ToTable("currency_purchase", "parameters");
            });

            modelBuilder.Entity("Models.Parameters.FirstLaunchParameters", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                b.Property<int>("Age")
                    .HasColumnName("age");

                b.Property<string>("Country")
                    .HasColumnName("country");

                b.Property<string>("Gender")
                    .HasColumnName("gender");

                b.HasKey("Id")
                    .HasName("pk_first_launch");

                b.ToTable("first_launch", "parameters");
            });

            modelBuilder.Entity("Models.Parameters.InGamePurchaseParameters", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                b.Property<string>("Item")
                    .HasColumnName("item");

                b.Property<int>("Price")
                    .HasColumnName("price");

                b.HasKey("Id")
                    .HasName("pk_in_game_purchase");

                b.ToTable("in_game_purchase", "parameters");
            });

            modelBuilder.Entity("Models.Parameters.StageEndParameters", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                b.Property<int?>("Income")
                    .HasColumnName("income");

                b.Property<int>("Stage")
                    .HasColumnName("stage");

                b.Property<int>("Time")
                    .HasColumnName("time");

                b.Property<bool>("Win")
                    .HasColumnName("win");

                b.HasKey("Id")
                    .HasName("pk_stage_end");

                b.ToTable("stage_end", "parameters");
            });

            modelBuilder.Entity("Models.Parameters.StageStartParameters", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                b.Property<int>("Stage")
                    .HasColumnName("stage");

                b.HasKey("Id")
                    .HasName("pk_stage_start");

                b.ToTable("stage_start", "parameters");
            });

            modelBuilder.Entity("Models.Events.CurrencyPurchaseEvent", b =>
            {
                b.HasOne("Models.Parameters.CurrencyPurchaseParameters", "Parameters")
                    .WithOne("Event")
                    .HasForeignKey("Models.Events.CurrencyPurchaseEvent", "ParametersId")
                    .HasConstraintName("parameters_id")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Models.Events.FirstLaunchEvent", b =>
            {
                b.HasOne("Models.Parameters.FirstLaunchParameters", "Parameters")
                    .WithOne("Event")
                    .HasForeignKey("Models.Events.FirstLaunchEvent", "ParametersId")
                    .HasConstraintName("parameters_id")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Models.Events.InGamePurchaseEvent", b =>
            {
                b.HasOne("Models.Parameters.InGamePurchaseParameters", "Parameters")
                    .WithOne("Event")
                    .HasForeignKey("Models.Events.InGamePurchaseEvent", "ParametersId")
                    .HasConstraintName("parameters_id")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Models.Events.StageEndEvent", b =>
            {
                b.HasOne("Models.Parameters.StageEndParameters", "Parameters")
                    .WithOne("Event")
                    .HasForeignKey("Models.Events.StageEndEvent", "ParametersId")
                    .HasConstraintName("parameters_id")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Models.Events.StageStartEvent", b =>
            {
                b.HasOne("Models.Parameters.StageStartParameters", "Parameters")
                    .WithOne("Event")
                    .HasForeignKey("Models.Events.StageStartEvent", "ParametersId")
                    .HasConstraintName("parameters_id")
                    .OnDelete(DeleteBehavior.Cascade);
            });
#pragma warning restore 612, 618
        }
    }
}